@model PaymentInfoModel

@{
    Layout = "";
    NopHtml.AddScriptParts(ResourceLocation.Footer, BraintreePaymentDefaults.ScriptPath, excludeFromBundle: true);
    NopHtml.AddScriptParts(ResourceLocation.Footer, BraintreePaymentDefaults.ClientScriptPath, excludeFromBundle: true);
    NopHtml.AddScriptParts(ResourceLocation.Footer, BraintreePaymentDefaults.HostedFieldsScriptPath, excludeFromBundle: true);
    NopHtml.AddScriptParts(ResourceLocation.Footer, BraintreePaymentDefaults.SecureScriptPath, excludeFromBundle: true);
}

<script asp-location="Footer">
    $(document).ready(function () {

        var authorization = '@Model.ClientToken';
        var submitForm = false;
        var stepBack = false;

        var onePageCheckout = @orderSettings.OnePageCheckoutEnabled.ToString().ToLower();

        var components = {
            client: null,
            threeDSecure: null,
            hostedFields: null
        };

        var bankFrame = document.querySelector('#braintree-authentication');

        $('.payment-info-next-step-button').attr('onclick', null);

        braintree.client.create({
            authorization: authorization
        }, onClientCreate);

        function onClientCreate(err, client) {
            if (err) {
                //console.log('client error:', err);
                return;
            }
            components.client = client;

            braintree.hostedFields.create({
                client: client,
                fields: {
                    number: {
                        selector: '#braintree-card-number',
                        placeholder: '•••• •••• •••• ••••'
                    },
                    cvv: {
                        selector: '#cc-cvv',
                        placeholder: 'CVV'
                    },
                    expirationDate: {
                        selector: '#braintree-expiration-date',
                        placeholder: 'MM/YY'
                    }
                }
            }, onComponent('hostedFields'));

            braintree.threeDSecure.create({
                client: client,
                version: 2
            }, onComponent('threeDSecure'));
        }

        function onComponent(name) {
            return function(err, component) {
                if (err)
                    return;

                components[name] = component;
            }
        }

        function addFrame(err, iframe) {
            bankFrame.appendChild(iframe);
        }

        function removeFrame() {
            var iframe = bankFrame.querySelector('iframe');
            iframe.parentNode.removeChild(iframe);
        }

        function verifyCard(payload) {

            @{
                var address = await addressService.GetAddressByIdAsync((await workContext.GetCurrentCustomerAsync()).BillingAddressId ?? 0);
                var stateProvince = await stateProvinceService.GetStateProvinceByAddressAsync(address);
                var country = await countryService.GetCountryByAddressAsync(address);
            }

            components.threeDSecure.verifyCard({
                bin : payload.details.bin,
                amount: '@((Model.OrderTotal ?? 0M).ToString("0.00", CultureInfo.InvariantCulture))',
                nonce: payload.nonce,
                addFrame: addFrame,
                removeFrame: removeFrame,
                challengeRequested: true,
                email: '@address?.Email',
                billingAddress: {
                    givenName: '@address?.FirstName',
                    surname: '@address?.LastName',
                    phoneNumber: '@address?.PhoneNumber',
                    streetAddress: '@address?.Address1',
                    extendedAddress: '@address?.Address2',
                    locality: '@address?.City',
                    region: '@stateProvince?.Abbreviation',
                    postalCode: '@address?.ZipPostalCode',
                    countryCodeAlpha2: '@country?.TwoLetterIsoCode'
                },
                onLookupComplete: function (data, next) {
                    // use `data` here, then call `next()`
                    next();
                }
            }, function (err, payload) {
                if (err) {
                    var currentErrorvalue = $('#@Html.IdFor(model => model.Errors)').val();
                    $('#@Html.IdFor(model => model.Errors)').val(currentErrorvalue + '|' + err.message);
                    return;
                }

                // Add the nonce to the form and submit
                if(payload.liabilityShiftPossible  && payload.liabilityShifted)
                {
                    document.querySelector('#CardNonce').value = payload.nonce;
                    submitForm = true;
                }
            });
        }

        $('.payment-info-next-step-button').on('click', function (data) {
            $('#braintree-errors').html('');
            if (!submitForm) {
                if (!stepBack) {
                    components.hostedFields.tokenize(function(err, payload) {
                        if (err) {
                            console.log('tokenization error:', err);

                            var currentErrorvalue = $('#@Html.IdFor(model => model.Errors)').val();
                            $('#@Html.IdFor(model => model.Errors)').val(currentErrorvalue + '|' + err.message);

                            $('#braintree-errors').html(err.message);
                            return;
                        }

                        verifyCard(payload);
                    });
                }
                return false;
            }
            else if (onePageCheckout) {
                submitForm = false;
                PaymentInfo.save();
            }
        });

        $(document).on('accordion_section_opened', function (data) {
            if (data && (data.currentSectionId == 'opc-billing' || data.currentSectionId == 'opc-shipping' || data.currentSectionId == 'opc-shipping_method' || data.currentSectionId == 'opc-payment_method')) {
                stepBack = true;
            }
        });
    });
</script>

<style type="text/css">
    .braintree-input {
        height: 36px;
        border: 1px solid #ddd;
        padding: 8px;
        vertical-align: middle;
        color: #777;
    }

    .invalid-feedback {
        display: none;
        width: 100%;
        margin-top: .25rem;
        font-size: 80%;
        color: #dc3545;
    }
</style>

<input type="hidden" asp-for="Errors" />
<div style="color:red; margin:0 auto" id="braintree-errors"></div>

<table width="100%" cellspacing="2" cellpadding="1" border="0">
    <tr>
        <td>
            <label>@T("Payment.CardNumber"):</label>
        </td>
        <td>
            <div class="braintree-input" id="braintree-card-number" style="width:165px;"></div>
        </td>
    </tr>
    <tr>
        <td>
            <label>@T("Payment.ExpirationDate"):</label>
        </td>
        <td>
            <div class="braintree-input" id="braintree-expiration-date" style="width:65px;"></div>
        </td>
    </tr>
    <tr>
        <td>
            <label>@T("Payment.CardCode"):</label>
        </td>
        <td>
            <div class="braintree-input" id="cc-cvv" style="width:65px;"></div>
            <input id="CardNonce" name="CardNonce" type="hidden" />
        </td>
    </tr>
</table>

<div id="braintree-authentication"></div>

@if (orderSettings.OnePageCheckoutEnabled)
{
    @NopHtml.GenerateInlineScripts(ResourceLocation.Footer)
}